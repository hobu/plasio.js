// transform-loaders.js
// Loaders for different kinds of transforms
//

let vec3 = require('gl-matrix').vec3;

import * as util from "./util";

/**
 * Simplifies loading transforms that show each buffer.  This is similar to a BufferLoader, but instead
 * of loading buffers, it loads transforms.
 */
class TransformLoader {
    /**
     * Setup a basic transform loader instance.
     * @param [params.offset] {String} The overall offset to apply to each buffer this loader is associated with.
     */
    constructor(params) {
        this.offset = util.checkParam(params || {}, 'offset',  [0, 0, 0]);
    }

    static get key () {
        return "transform"
    }

    static get provides() {
        return "transform";
    }

    /**
     * Generate a query for this loader given the specified parameters.
     * @param params
     * @return {object} An object which encodes all needed settings to successfully query a remote resource.  This
     * object should be
     */
    queryFor(params) {
        const renderSpaceBounds = util.checkParam(params, 'renderSpaceBounds');
        const boundsCenter = util.boundsCenter(renderSpaceBounds);

        return {
            position: boundsCenter,
            offset: vec3.add([0, 0, 0], boundsCenter, this.offset),
            mins: renderSpaceBounds.slice(0, 3),
            maxs: renderSpaceBounds.slice(3),
            normalize: true
        };
    }

    /**
     * Load transform for given params which were initially generated through queryFor method.
     * @param params {object} The parameters as generated by the queryFor method, this object should be treated as an
     * opaque object.
     * @param loadParams {object} Additional load time parameters.
     * @param loadParams.weight {Number} Weight of the resource being loaded, higher weight means they are queued first for downloading.
     * @param cb The callback called when the load completes.
     * @return {Promise.<T>} A promise which resolves to the loaded transform.
     */
    static load(params, loadParams, cb) {
        return new Promise((resolve, _reject) => {
            if (cb) cb(null, params);
            resolve(params);
        });
    }
}

module.exports = {
    TransformLoader: TransformLoader
};
